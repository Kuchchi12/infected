 extends KinematicBody2D

onready var player = get_parent().get_node('Player')
onready var map_navigation = get_parent().get_node('Map/Navigation2D')
onready var count_bar = get_parent().get_node('CountBar')
onready var count_label = get_parent().get_node("CountLabel")
var spell = preload("res://Mini Scenes/Spell.tscn")

var speed = 150
var max_hp = 400
var current_hp
var total_enemies = 10
var state = 'Rest'
var can_fire = true
var rate_of_fire = 0.6
var starting_position

var player_position
var fire_direction

var player_in_range 
var player_in_sight
var player_seen
var destination



func _ready():
	current_hp = max_hp
	set_physics_process(true)
	starting_position = get_global_position()

func _process(delta):
	match state:
		'Rest':
			print('ZZZZzzzz')
		'Attack':
			if can_fire == true:
				Attack()
			else:
				pass
		'Search':
			Search(delta)
		'Return':
			yield(get_tree().create_timer(3), "timeout")
			if state == 'Return':
				ReturnToStartingPoint(delta)
			else:
				pass

func _physics_process(delta):
	SightCheck()

func Attack():
		can_fire = false
		speed = 0
		fire_direction = (get_angle_to(player_position)/3.14) * 180
		get_node("TurnAxis").rotation = get_angle_to(player_position)
		var spell_instance = spell.instance()
		spell_instance.position = get_node("TurnAxis/CastPoint").get_global_position()
		spell_instance.rotation = get_angle_to(get_global_position())
		get_parent().add_child(spell_instance)
		yield(get_tree().create_timer(rate_of_fire), "timeout")
		can_fire = true
		speed = 150

func Search(delta):
	print('searching....')
	var path_to_destination = map_navigation.get_simple_path(get_global_position(), destination)
	var starting_point = get_global_position()
	var move_dist = speed * delta
	
	for point in range(path_to_destination.size()):
		var dist_to_next_point = starting_point.distance_to(path_to_destination[0])
		
		if move_dist <= dist_to_next_point:
			var move_rotation = get_angle_to(starting_point.linear_interpolate(path_to_destination[0], move_dist / (dist_to_next_point+1)))
			var motion = Vector2(speed, 0).rotated(move_rotation)
			move_and_slide(motion)
			break
			
		move_dist -= dist_to_next_point
		starting_point = path_to_destination[0]
		path_to_destination.remove(0)
	
	if path_to_destination.size() == 0:
		player_seen = false
		if get_global_position() == starting_position:
			state = 'Rest'
		else:
			state = 'Return'

func ReturnToStartingPoint(delta):
	var path_to_starting_position = map_navigation.get_simple_path(get_global_position(), starting_position)
	var starting_point = get_global_position()
	var move_dist = speed * delta
	
	for point in range(path_to_starting_position.size()):
		var dist_to_next_point = starting_point.distance_to(path_to_starting_position[0])
		
		if move_dist <= dist_to_next_point:
			var move_rotation = get_angle_to(starting_point.linear_interpolate(path_to_starting_position[0], move_dist / dist_to_next_point))
			var motion = Vector2(speed, 0).rotated(move_rotation)
			move_and_slide(motion)
			break
			
		move_dist -= dist_to_next_point
		starting_point = path_to_starting_position[0]
		path_to_starting_position.remove(0)
	
	if path_to_starting_position.size() == 0:
		state = 'Rest'

func OnHit(damage):
	current_hp -= damage
	if current_hp <= 0:
		OnDeath()

func OnDeath():
	get_node("Collision").set_deferred('disabled', true)
	print('I am dead')
	total_enemies -= 1
	count_bar.value = total_enemies
	count_label.clear()
	count_label.add_text('INFECTED: ', total_enemies)

func _on_Sight_body_entered(body):
	if body == player:
		player_in_range = true

func _on_Sight_body_exited(body):
	if body == player:
		player_in_range = false
		if player_seen == true:
			state = 'Search'

func SightCheck():																														# Checks if enemy has a direct line of sight of player.
	if player_in_range == true:																										# at the moment when player comes in range.
		var space_state = get_world_2d().direct_space_state
		var sight_check = space_state.intersect_ray(position, player.position, [self], collision_mask)
		
		if sight_check:
			if sight_check.collider.name == 'Player':
				player_in_sight = true
				player_seen = true
				player_position = player.get_global_position()
				destination = map_navigation.get_closest_point(player_position)
				state = 'Attack'
			else:
				player_in_sight = false
				if player_seen == true:
					state = 'Search'
				else:
					if get_global_position() == starting_position:
						state = 'Rest'
					else:
						state = 'Return'
